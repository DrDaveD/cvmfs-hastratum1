#!/usr/bin/python
#
# Manage adding and removing CVMFS replicas based on a configuration
#  file and the repositories list from stratum 0s or other stratum 1s
# Written by Dave Dykstra, February 2017

from optparse import OptionParser
import urllib2
import sys
import os
import time
import anyjson
import fnmatch

prog = 'manage-replicas'
addcmd = 'add-repository @fqrn@ @url@'
remcmd = 'remove-repository @fqrn@'
replist = ''
source = ''
keypath = ''
excludes = []
repospecs = []
replicalist = []

usagestr = "Usage: %prog [-h ] [ other_options ]\n" \
           "    Use -h to see help"
parser = OptionParser(usage=usagestr, prog=prog)
parser.add_option("-f", "--config",
                  metavar="file", default="/etc/cvmfs/replicas.conf",
                  help="use file as configuration file")
parser.add_option("-n", "--dry-run",
                  action="store_true", default=False,
                  help="Show what would be done, don't actually do it")
parser.add_option("-l", "--list",
                  action="store_true", default=False,
                  help="Show full source url of all repos and exit")
parser.add_option("-r", "--remove",
                  action="store_true", default=False,
                  help="Remove repositories that don't belong, don't just warn about them")
(options, args) = parser.parse_args(sys.argv)

def logmsg(msg):
  print time.asctime(time.localtime(time.time())) + ' ' + msg
  sys.stdout.flush()

def fatal(msg, code=1):
  print >> sys.stderr, prog + ": " + msg
  sys.exit(code)

def efatal(msg, e, code=1):
  fatal(msg + ': ' + type(e).__name__ + ': ' + str(e), code)

if options.remove:
  fatal('--remove option not implemented yet')

# read the config file
try:
  fd = open(options.config, 'r')
  lines = fd.readlines()
  fd.close()
except Exception, e:
  efatal('could not open config file', e)

#
# go through the config file lines
#
linenum = 0

def configfatal(msg):
  fatal(options.config + ' line ' + str(linenum) + ': ' + msg)

if not options.list:
  logmsg('Starting')

for line in lines:
  linenum += 1
  # remove comments and trailing whitespace
  ihash = line.find('#')
  if ihash >= 0:
    line = line[0:ihash]
  line = line.rstrip()
  if line == "":
    continue
  (key, value) = line.split(None, 1)
  if key == 'addcmd':
    addcmd = value
  elif key == 'remcmd':
    remcmd = value
  elif key == 'replist':
    try:
      response = urllib2.urlopen(value)
      reps = anyjson.deserialize(response.read())
    except Exception, e:
      efatal('failure reading and/or decoding ' + value, e)
    replicalist = []
    for rep in reps['replicas']:
      replicalist.append(rep['name'])
  elif key == 'source':
    source = value
  elif key == 'keypath':
    keypath = value
  elif key == 'exclude':
    for exclude in value.split():
      excludes.append(exclude)
  elif key == 'repos':
    if source == '':
      configfatal('No source specified before repos')
    for repo in value.split():
      if '*' in repo or '?' in repo or '[' in repo or ']' in repo:
        # match against a replist
        if len(replicalist) == 0:
          configfatal('No replist specified before repos')
        for replica in replicalist:
          if fnmatch.fnmatch(replica, repo):
            excluded = False
            for exclude in excludes:
              if fnmatch.fnmatch(replica, exclude):
                excluded = True
                break
            if not excluded:
              repospecs.append([replica, source, keypath])
      else:
        # no wildcards, just see if it has to be excluded
        #  although that's rather unlikely
        excluded = False
        for exclude in excludes:
          if fnmatch.fnmatch(repo, exclude):
            excluded = True
            break
        if not excluded:
          repospecs.append([repo, source, keypath])
      # exclude this repo pattern from future matches
      excludes.append(repo)
  else:
    configfatal('unrecognized keyword: ' + key)

if options.list:
  for repo, source, keys in repospecs:
    print source + '/cvmfs/' + repo
  sys.exit(0)


if not options.dry_run:
  print 'non dry-run not yet implemented'
  sys.exit(1)


for repo, url, keypath in repospecs:
  serverconf = '/etc/cvmfs/repositories.d/' + repo + '/server.conf'
  replicaconf = '/etc/cvmfs/repositories.d/' + repo + '/replica.conf'
  if os.path.exists(serverconf):
    # Repo exists.  If there's no replica.conf, it may
    #   be blanked so skip that.
    # If add command using the full url and it doesn't
    #   match what is in server.conf, edit server.conf.
    if os.path.exists(replicaconf) and (addcmd.find('@url@') >= 0):
      contents = open(serverconf).read()
      if ('CVMFS_STRATUM0=' + url) not in contents:
        start = contents.find('CVMFS_STRATUM0=')
        if start > 0:
          start += len('CVMFS_STRATUM0=')
          end = contents.find('\n',start)
          if (end > 0):
            contents = contents[:start] + url + contents[end:]
            logmsg('Setting new url for ' + repo + ': ' + url)
            if not options.dry_run:
              open(serverconf, 'w').write(contents)
  else:
    # repo does not exist.  add it.
    cmd = addcmd.replace('@url@', url).replace('@fqrn@', repo).replace('@keypath@', keypath)
    logmsg('Running ' + cmd)
    if not options.dry_run:
      code = os.system(cmd)
      if code != 0:
        logmsg('Add failed with exit code ' + hex(code))
        cmd = undo_command.replace('@fqrn@',repo)
        logmsg('Running ' + cmd)
        code = os.system(cmd)
        if code != 0:
          logmsg('Undo failed with exit code ' + hex(code))

logmsg('Finished')
